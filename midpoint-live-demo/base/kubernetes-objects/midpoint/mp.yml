apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mp
  template:
    metadata:
      labels:
        app: mp
    spec:
      volumes:
        - name: init-db
          emptyDir: {}
        - name: update-war-files
          configMap:
            name: update-war-files
            items:
            - key: update_war_files.sh
              path: update_war_files.sh
            defaultMode: 0777
        - name: hr-properties
          configMap:
            name: update-war-files
            items:
            - key: jdbc.properties
              path: jdbc.properties
            defaultMode: 0555
        - name: addressbook-properties
          configMap:
            name: update-war-files
            items:
            - key: application.properties
              path: application.properties
            defaultMode: 0555

        - name: addressbook-db-init
          # init of addressbook db
          configMap:
            name: addressbook-script-map
            defaultMode: 0555
        - name: hr-db-init
          configMap:
            name: hr-script-map
            defaultMode: 0555
        - name: wait-for-it
          configMap:
            name: keycloak-wait-script-map
            defaultMode: 0555
        - name: shared-data-tomcat
          emptyDir: {}
        - name: nfs-volume
          emptyDir: {}
        - name: mp-home
          emptyDir: {}
        - name: mp-lib
          emptyDir: {}
        - name: configuration-secret
          secret:
            secretName: configuration-secret
            defaultMode: 420
        - name: pio
          projected:
            sources:
               - configMap:
                   name: users-map
               - configMap:
                   name: pio-map-0
               - configMap:
                   name: pio-map-1
              #  - configMap:
              #      name: pio-map-2
               - configMap:
                   name: roles-map
        - name: login-page
          configMap:
            name: login-page-map
            defaultMode: 0777
        - name: import
          configMap:
            name: hr-map
            defaultMode: 420
        - name: tomcat-config
          configMap:
            name: tomcat-map
            defaultMode: 420
        - name: extension-schema
          configMap:
            name: extension-map
            defaultMode: 420
        - name: midpoint-init-db
          configMap:
            name: midpoint-create-db
            defaultMode: 0555
      initContainers:
      ### Let's init midpoint first
        - name: init-midpoint-db
          # image: 'evolveum/midpoint:4.8.1-alpine'
          image: 'inalogy/midpoint:4.8.1-alpine'
          command:
            - /bin/bash
            - /opt/midpoint/bin/midpoint.sh
            - init-native
          env:
            - name: MP_INIT_DB_CONCAT
              value: /opt/db-init/010-init.sql
          resources: {}
          volumeMounts:
            - name: init-db
              mountPath: /opt/db-init
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always

        - name: init-midpoint-db-create
          image: 'postgres:16-alpine'
          volumeMounts:
            - name: midpoint-init-db
              mountPath: /tmp/db/midpoint-db.sh
            - name: init-db
              mountPath: /opt/db-init
            - name: wait-for-it
              mountPath: /tmp/wait/
          env:
            - name: DB_USER
              value: midpoint
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: configuration-secret
                  key: db_password
          envFrom:
            - configMapRef:
                name: database-settings
          command: ["/bin/bash", "-c", "/tmp/wait/waitforit.sh ${DB_ADDR}:${DB_PORT} -t 180 && psql \"postgresql://${DB_USER}:${DB_PASSWORD}@${DB_ADDR}:${DB_PORT}\" -a -q -f /opt/db-init/010-init.sql"]

        - name: mp-config-init
          image: 'inalogy/midpoint:4.8.1-alpine'
          # image: 'evolveum/midpoint:4.8.1-alpine'
          command:
            - /bin/bash
            - "-c"
            - |
              /mnt/page/addLoginPage.sh
              /opt/midpoint/bin/midpoint.sh init-native
          env:
            - name: MP_INIT_CFG
              value: /opt/mp-home
          resources: {}
          volumeMounts:
            - name: mp-home
              mountPath: /opt/mp-home
            - name: login-page
              mountPath: /mnt/page
            - name: mp-lib
              mountPath: /mnt/lib
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always

      containers:
        - name: mp
          # image: 'evolveum/midpoint:4.8.1-alpine'
          image: 'inalogy/midpoint:4.8.1-alpine'
          ports:
            - name: gui
              containerPort: 8080
              protocol: TCP
          env:
            - name: MP_ENTRY_POINT
              value: /opt/midpoint-dirs-docker-entrypoint
            - name: MP_SET_midpoint_keystore_keyStorePath
              value: /opt/midpoint/config-secrets/keystore.jceks
            - name: MP_SET_midpoint_keystore_keyStorePassword_FILE
              value: /opt/midpoint/config-secrets/keystore
            - name: MP_SET_midpoint_repository_database
              value: postgresql
            - name: POD_NS
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: MP_SET_midpoint_repository_jdbcUsername
              value: midpoint
            - name: MP_SET_midpoint_repository_jdbcPassword_FILE
              value: /opt/midpoint/config-secrets/db_password
            - name: MP_SET_midpoint_constants_LDAPADDRESS
              value: 'ldap-service.$(POD_NS).svc.cluster.local'

            - name: MP_SET_midpoint_constants_BOOKADDRESS
              value: 'postgress-service.$(POD_NS).svc.cluster.local'
            - name: MP_SET_midpoint_constants_BOOKJDBCADDRESS
              value: 'jdbc:postgresql://postgres-service.$(POD_NS).svc.cluster.local:5432/addressbook'

            - name: MP_SET_midpoint_constants_INALOGYHR
              value: 'postgres-service.$(POD_NS).svc.cluster.local'
            - name: MP_SET_midpoint_constants_INALOGYHRJDBC
              value: 'jdbc:postgresql://postgres-service.$(POD_NS).svc.cluster.local:5432/inalogy-hr'

            - name: MP_SET_midpoint_repository_jdbcUrl
              value: >-
                jdbc:postgresql://postgres-service.$(POD_NS).svc.cluster.local:5432/midpoint
            - name: MP_UNSET_midpoint_repository_hibernateHbm2ddl
              value: '1'
            - name: MP_SET_midpoint_nodeIdSource
              value: hostname
            - name: MP_SET_midpoint_taskManager_clustered
              value: 'true'
            - name: MP_NO_ENV_COMPAT
              value: '1'
            - name: MP_MEM_MAX
              value: 4096m
            - name: MP_MEM_INIT
              value: 2048m
            - name: TZ
              value: UTC
          resources: {}
          volumeMounts:
            - name: configuration-secret
              mountPath: /opt/midpoint/config-secrets
            - name: pio
              mountPath: /opt/midpoint-dirs-docker-entrypoint/post-initial-objects
            - name: import
              mountPath: /opt/midpoint-dirs-docker-entrypoint/import
            - name: extension-schema
              mountPath: /opt/midpoint-dirs-docker-entrypoint/schema
            - name: nfs-volume
              mountPath: /opt/midpoint/var/import/
            - name: mp-home
              mountPath: /opt/midpoint/var
            - name: mp-lib
              mountPath: /opt/midpoint/lib
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 10
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  serviceName: mp-service
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  revisionHistoryLimit: 10

