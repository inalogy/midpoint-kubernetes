<objectTemplate xmlns="http://midpoint.evolveum.com/xml/ns/public/common/common-3" xmlns:c="http://midpoint.evolveum.com/xml/ns/public/common/common-3" xmlns:icfs="http://midpoint.evolveum.com/xml/ns/public/connector/icf-1/resource-schema-3" xmlns:org="http://midpoint.evolveum.com/xml/ns/public/common/org-3" xmlns:q="http://prism.evolveum.com/xml/ns/public/query-3" xmlns:ri="http://midpoint.evolveum.com/xml/ns/public/resource/instance-3" xmlns:t="http://prism.evolveum.com/xml/ns/public/types-3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" oid="00000000-0000-0000-0000-000000000380" version="4">
    <name>Person Object Template</name>
    <description>Object template for Person users, contains mappings to generate fullName and username. Please enable appropriate mappings as needed.</description>
    <metadata>
        <requestTimestamp>2024-02-12T13:49:44.295Z</requestTimestamp>
        <createTimestamp>2024-02-12T13:49:44.326Z</createTimestamp>
        <createChannel>http://midpoint.evolveum.com/xml/ns/public/common/channels-3#init</createChannel>
        <modifyTimestamp>2024-02-13T07:48:00.298Z</modifyTimestamp>
        <modifierRef oid="00000000-0000-0000-0000-000000000002" relation="org:default" type="c:UserType"/>
        <modifyChannel>http://midpoint.evolveum.com/xml/ns/public/common/channels-3#user</modifyChannel>
    </metadata>
    <operationExecution id="3">
        <recordType>simple</recordType>
        <timestamp>2024-02-12T13:49:44.507Z</timestamp>
        <operation>
            <objectDelta>
                <t:changeType>add</t:changeType>
                <t:objectType>c:ObjectTemplateType</t:objectType>
            </objectDelta>
            <executionResult>
                <operation>com.evolveum.midpoint.model.impl.lens.ChangeExecutor.executeDelta</operation>
                <status>success</status>
                <importance>normal</importance>
                <token>1000000000000000317</token>
            </executionResult>
            <objectName>Person Object Template</objectName>
        </operation>
        <status>success</status>
        <channel>http://midpoint.evolveum.com/xml/ns/public/common/channels-3#init</channel>
    </operationExecution>
    <operationExecution id="4">
        <recordType>simple</recordType>
        <timestamp>2024-02-13T07:48:00.412Z</timestamp>
        <operation>
            <objectDelta>
                <t:changeType>modify</t:changeType>
                <t:objectType>c:ObjectTemplateType</t:objectType>
            </objectDelta>
            <executionResult>
                <operation>com.evolveum.midpoint.model.impl.lens.ChangeExecutor.executeDelta</operation>
                <status>success</status>
                <importance>normal</importance>
                <token>1000000000000071714</token>
            </executionResult>
            <objectName>Person Object Template</objectName>
        </operation>
        <status>success</status>
        <initiatorRef oid="00000000-0000-0000-0000-000000000002" relation="org:default" type="c:UserType"/>
        <channel>http://midpoint.evolveum.com/xml/ns/public/common/channels-3#user</channel>
    </operationExecution>
    <iteration>0</iteration>
    <iterationToken/>
    <iterationSpecification>
        <maxIterations>99</maxIterations>
        <tokenExpression>
            <description>The iteration starts with empty string, then a number is appended, starting with 2 (skipping 1), 3, ... up to 99.</description>
            <documentation>
                Example, how the iteration could look like if `jsmith` username is already taken:

                . jsmith
                . jsmith2
                . jsmith3
                . ... up to jsmith99

                If even `jsmith99` cannot be used because it already exists, the attempt to create user in midPoint will fail.

                `maxIterations` can be updated.

                Also, the script can be updated to prepare iterationToken variable in a different way.

                E.g. iterationToken can be created as '02' instead of just '2'. Or a random number instead of a sequential iterator can be used.
            </documentation>
            <script>
                <code>
                    if (iteration == 0) {
                        return ""
                    } else {
                        // for 8+2 naming convention, we might want to use %02d instead
                        //return sprintf("%02d", iteration+1)
                        return iteration + 1
                    }
                </code>
            </script>
        </tokenExpression>
    </iterationSpecification>    
    <mapping>
        <name>Initial password generator</name>
        <strength>weak</strength>
        <source>
            <path>costCenter</path>
        </source>
        <expression>
            <generate>
                <valuePolicyRef oid="82eda6e8-c8aa-4d44-9c2c-5f1835f81be6" />
            </generate>
        </expression>
        <target>
            <c:path>credentials/password/value</c:path>
        </target>
    </mapping>
    <mapping id="1">
        <name>generate-name</name>
        <description>xx</description>
        <documentation>
            name is generated as   givenName.familyName
        </documentation>
        <lifecycleState>active</lifecycleState>
        <strength>strong</strength>
        <source>
            <path>givenName</path>
        </source>
        <source>
            <path>familyName</path>
        </source>
        <expression>
            <script>
                <code>
                tmpGivenName = basic.trim(basic.norm(basic.stringify(givenName)))
                tmpFamilyName  = basic.trim(basic.norm(basic.stringify(familyName)))
                return (tmpGivenName + "." + tmpFamilyName?.replaceAll(" ", "")) + iterationToken // no spaces

                <!-- (givenName == null ? '' : givenName) + '.' + (familyName == null ? '' : familyName) -->
                
                </code>
            </script>
        </expression>
        <target>
            <path>name</path>
        </target>
    </mapping>
    <mapping id="2">
        <name>generate-fullname</name>
        <description>Generate fullName (enforcing on renames because of strong mapping)</description>
        <strength>weak</strength>
        <source>
            <path>givenName</path>
        </source>
        <source>
            <path>familyName</path>
        </source>
        <expression>
            <script>
                <code>
                    basic.concatName(givenName, familyName)
                </code>
            </script>
        </expression>
        <target>
            <path>fullName</path>
        </target>
    </mapping>
</objectTemplate>
